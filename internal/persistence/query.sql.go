// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package persistence

import (
	"context"
	"database/sql"
)

const createIssue = `-- name: CreateIssue :one
INSERT INTO
  issues (link, title, description, owner, creation_date)
VALUES
  (?, ?, ?, ?, ?) RETURNING id, link, title, description, owner, creation_date
`

type CreateIssueParams struct {
	Link         string
	Title        sql.NullString
	Description  sql.NullString
	Owner        sql.NullString
	CreationDate sql.NullTime
}

func (q *Queries) CreateIssue(ctx context.Context, arg CreateIssueParams) (Issue, error) {
	row := q.db.QueryRowContext(ctx, createIssue,
		arg.Link,
		arg.Title,
		arg.Description,
		arg.Owner,
		arg.CreationDate,
	)
	var i Issue
	err := row.Scan(
		&i.ID,
		&i.Link,
		&i.Title,
		&i.Description,
		&i.Owner,
		&i.CreationDate,
	)
	return i, err
}

const deleteIssue = `-- name: DeleteIssue :exec
DELETE FROM issues
WHERE
  id = ?
`

func (q *Queries) DeleteIssue(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteIssue, id)
	return err
}

const getIssue = `-- name: GetIssue :one
SELECT
  id, link, title, description, owner, creation_date
FROM
  issues
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetIssue(ctx context.Context, id int64) (Issue, error) {
	row := q.db.QueryRowContext(ctx, getIssue, id)
	var i Issue
	err := row.Scan(
		&i.ID,
		&i.Link,
		&i.Title,
		&i.Description,
		&i.Owner,
		&i.CreationDate,
	)
	return i, err
}

const listIssues = `-- name: ListIssues :many
SELECT
  id, link, title, description, owner, creation_date
FROM
  issues
ORDER BY
  name
`

func (q *Queries) ListIssues(ctx context.Context) ([]Issue, error) {
	rows, err := q.db.QueryContext(ctx, listIssues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Issue
	for rows.Next() {
		var i Issue
		if err := rows.Scan(
			&i.ID,
			&i.Link,
			&i.Title,
			&i.Description,
			&i.Owner,
			&i.CreationDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIssue = `-- name: UpdateIssue :exec
UPDATE issues
set
  link = ?,
  title = ?,
  description = ?,
  owner = ?,
  creation_date = ?
WHERE
  id = ?
`

type UpdateIssueParams struct {
	Link         string
	Title        sql.NullString
	Description  sql.NullString
	Owner        sql.NullString
	CreationDate sql.NullTime
	ID           int64
}

func (q *Queries) UpdateIssue(ctx context.Context, arg UpdateIssueParams) error {
	_, err := q.db.ExecContext(ctx, updateIssue,
		arg.Link,
		arg.Title,
		arg.Description,
		arg.Owner,
		arg.CreationDate,
		arg.ID,
	)
	return err
}
