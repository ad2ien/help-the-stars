// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package persistence

import (
	"context"
	"database/sql"
	"time"
)

const createIssue = `-- name: CreateIssue :one
INSERT INTO
  issues (url, repo_with_owner, title, description, creation_date, repo_description, stargazers_count)
VALUES
  (?, ?, ?, ?, ?, ?, ?) RETURNING url, repo_with_owner, title, description, creation_date, repo_description, stargazers_count
`

type CreateIssueParams struct {
	Url             string
	RepoWithOwner   string
	Title           string
	Description     string
	CreationDate    time.Time
	RepoDescription string
	StargazersCount sql.NullInt64
}

func (q *Queries) CreateIssue(ctx context.Context, arg CreateIssueParams) (Issue, error) {
	row := q.db.QueryRowContext(ctx, createIssue,
		arg.Url,
		arg.RepoWithOwner,
		arg.Title,
		arg.Description,
		arg.CreationDate,
		arg.RepoDescription,
		arg.StargazersCount,
	)
	var i Issue
	err := row.Scan(
		&i.Url,
		&i.RepoWithOwner,
		&i.Title,
		&i.Description,
		&i.CreationDate,
		&i.RepoDescription,
		&i.StargazersCount,
	)
	return i, err
}

const deleteIssue = `-- name: DeleteIssue :exec
DELETE FROM issues
WHERE
  url = ?
`

func (q *Queries) DeleteIssue(ctx context.Context, url string) error {
	_, err := q.db.ExecContext(ctx, deleteIssue, url)
	return err
}

const deleteTaskData = `-- name: DeleteTaskData :exec
DELETE FROM task_data
WHERE
  id = 1
`

func (q *Queries) DeleteTaskData(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteTaskData)
	return err
}

const getIssue = `-- name: GetIssue :one
SELECT
  url, repo_with_owner, title, description, creation_date, repo_description, stargazers_count
FROM
  issues
WHERE
  url = ?
LIMIT
  1
`

func (q *Queries) GetIssue(ctx context.Context, url string) (Issue, error) {
	row := q.db.QueryRowContext(ctx, getIssue, url)
	var i Issue
	err := row.Scan(
		&i.Url,
		&i.RepoWithOwner,
		&i.Title,
		&i.Description,
		&i.CreationDate,
		&i.RepoDescription,
		&i.StargazersCount,
	)
	return i, err
}

const getTaskData = `-- name: GetTaskData :one
SELECT
  id, last_run, in_progress
FROM
  task_data
LIMIT
  1
`

func (q *Queries) GetTaskData(ctx context.Context) (TaskDatum, error) {
	row := q.db.QueryRowContext(ctx, getTaskData)
	var i TaskDatum
	err := row.Scan(&i.ID, &i.LastRun, &i.InProgress)
	return i, err
}

const initTaskData = `-- name: InitTaskData :exec
INSERT INTO
  task_data (id, last_run, in_progress)
VALUES
  (1, NULL, true) RETURNING id, last_run, in_progress
`

func (q *Queries) InitTaskData(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, initTaskData)
	return err
}

const listIssues = `-- name: ListIssues :many
SELECT
  url, repo_with_owner, title, description, creation_date, repo_description, stargazers_count
FROM
  issues
ORDER BY
  creation_date DESC
`

func (q *Queries) ListIssues(ctx context.Context) ([]Issue, error) {
	rows, err := q.db.QueryContext(ctx, listIssues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Issue
	for rows.Next() {
		var i Issue
		if err := rows.Scan(
			&i.Url,
			&i.RepoWithOwner,
			&i.Title,
			&i.Description,
			&i.CreationDate,
			&i.RepoDescription,
			&i.StargazersCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const taskDataInProgress = `-- name: TaskDataInProgress :exec
UPDATE task_data
SET
  in_progress = true
WHERE
  id = 1
`

func (q *Queries) TaskDataInProgress(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, taskDataInProgress)
	return err
}

const updateIssue = `-- name: UpdateIssue :exec
UPDATE issues
set
  repo_with_owner = ?,
  title = ?,
  description = ?,
  creation_date = ?,
  repo_description = ?,
  stargazers_count = ?
WHERE
  url = ?
`

type UpdateIssueParams struct {
	RepoWithOwner   string
	Title           string
	Description     string
	CreationDate    time.Time
	RepoDescription string
	StargazersCount sql.NullInt64
	Url             string
}

func (q *Queries) UpdateIssue(ctx context.Context, arg UpdateIssueParams) error {
	_, err := q.db.ExecContext(ctx, updateIssue,
		arg.RepoWithOwner,
		arg.Title,
		arg.Description,
		arg.CreationDate,
		arg.RepoDescription,
		arg.StargazersCount,
		arg.Url,
	)
	return err
}

const updateTimeTaskData = `-- name: UpdateTimeTaskData :exec
UPDATE task_data
SET
  last_run = ?,
  in_progress = false
WHERE
  id = 1
`

func (q *Queries) UpdateTimeTaskData(ctx context.Context, lastRun sql.NullTime) error {
	_, err := q.db.ExecContext(ctx, updateTimeTaskData, lastRun)
	return err
}
